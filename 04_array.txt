--array is collection of the elements of the same data  type.
--declaration syntax 
   datatype[] array_var_name= new datatype[size];
   ex:  1. int[] roll=new int[5];
        2. int[] roll={12,34,443,3,2};
        -- int[] roll : declaration of roll array 
                      : here roll is getting defined in the stack 
                      : this happen at compile time
        -- roll=new int[] 
                      :here actual object is created in heap memory .
                      : this thing is happend at runtime , is called  as dynamic memory allocation.
        -- in the example "roll" is a reference variable present in stack memory which ponts to the object {12,34,443,3,2} object present in heap memory.
** because of following reason array are  not continuos in java ***
-- all the object are in heap.
-- heap objects are not continous.
-- heap memory is runtime area memory.
-- dynmaic memory allocation.
-- allocation is totally depend on jvm.
-- "new" is a keyword is used to create objects in heap memory .
-- in the example :
      int[] roll={12,34,443,3,2}; 
       * here we wre not putting "new" but  "{12,34,443,3,2};" do internal work of creatiog object in heap memory .
-- for "integer" array if we do not intialize anything then by default it stores value "0".
-- for string data type by default it stores "null".
   1. String str=null 
    but we cannot assign  null value to integer data type 
        int a=null (we cannot do like this );
-- any refence varibale in java by default of type null.
-- primitive stores in stack memory (int,char,boolean)
-- non-primitives stores in heap memory (string,array, other complex data types).


******** 2D array **********************
 1D array is defined with int[] (one)bracket.
 2D array is defined with int[][] (two) bracket.
 --In java we can work with 1D , 2D and 3D array after 3D array we cannot visualize such a huge dimensional array . so we use numpy and pandas liabraries in python.
-- 2D array example ::
                   0        1         2   (index of arr)
   int [][] arr={{1,2,3}, {2,5,6}, {8,9,0}}
                  0 1 2    0 1 2    0 1 2  (index of each individual array in arr)
-- if we do arr.length then it will return "3" as output because here there are three rows or we can say arrays are in the "arr".
   for storing elements in 2D array then we store it as follow :
            array_name[row][column];
    
                      
